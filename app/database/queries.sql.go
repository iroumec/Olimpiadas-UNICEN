// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const createHistoricSearch = `-- name: CreateHistoricSearch :one
INSERT INTO historic_searches(username,search_string) VALUES ($1,$2) RETURNING historic_search_id, username, search_string
`

type CreateHistoricSearchParams struct {
	Username     sql.NullString `json:"username"`
	SearchString string         `json:"search_string"`
}

func (q *Queries) CreateHistoricSearch(ctx context.Context, arg CreateHistoricSearchParams) (HistoricSearch, error) {
	row := q.db.QueryRowContext(ctx, createHistoricSearch, arg.Username, arg.SearchString)
	var i HistoricSearch
	err := row.Scan(&i.HistoricSearchID, &i.Username, &i.SearchString)
	return i, err
}

const createPreference = `-- name: CreatePreference :one
INSERT INTO preferences(preference) VALUES ($1) RETURNING preference
`

func (q *Queries) CreatePreference(ctx context.Context, preference string) (string, error) {
	row := q.db.QueryRowContext(ctx, createPreference, preference)
	err := row.Scan(&preference)
	return preference, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users(username,email,name,middlename,surname,password) VALUES ($1, $2, $3, $4, $5, $6) RETURNING username, email, name, middlename, surname, password
`

type CreateUserParams struct {
	Username   string         `json:"username"`
	Email      string         `json:"email"`
	Name       string         `json:"name"`
	Middlename sql.NullString `json:"middlename"`
	Surname    string         `json:"surname"`
	Password   string         `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Name,
		arg.Middlename,
		arg.Surname,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.Name,
		&i.Middlename,
		&i.Surname,
		&i.Password,
	)
	return i, err
}

const deleteHistoricSearch = `-- name: DeleteHistoricSearch :exec
DELETE FROM historic_searches WHERE historic_search_id = $1
`

func (q *Queries) DeleteHistoricSearch(ctx context.Context, historicSearchID int32) error {
	_, err := q.db.ExecContext(ctx, deleteHistoricSearch, historicSearchID)
	return err
}

const deletePreference = `-- name: DeletePreference :exec
DELETE FROM preferences WHERE preference = $1
`

func (q *Queries) DeletePreference(ctx context.Context, preference string) error {
	_, err := q.db.ExecContext(ctx, deletePreference, preference)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const listHistoricSearchesFromUser = `-- name: ListHistoricSearchesFromUser :many
SELECT search_string FROM historic_searches WHERE username = $1
`

func (q *Queries) ListHistoricSearchesFromUser(ctx context.Context, username sql.NullString) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listHistoricSearchesFromUser, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var search_string string
		if err := rows.Scan(&search_string); err != nil {
			return nil, err
		}
		items = append(items, search_string)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPreferences = `-- name: ListPreferences :many
SELECT preference FROM preferences ORDER BY preference
`

func (q *Queries) ListPreferences(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listPreferences)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var preference string
		if err := rows.Scan(&preference); err != nil {
			return nil, err
		}
		items = append(items, preference)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPreferencesFromUser = `-- name: ListPreferencesFromUser :many
SELECT preference FROM user_preferences WHERE username = $1
`

func (q *Queries) ListPreferencesFromUser(ctx context.Context, username string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listPreferencesFromUser, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var preference string
		if err := rows.Scan(&preference); err != nil {
			return nil, err
		}
		items = append(items, preference)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT username, email, name, middlename, surname, password FROM users ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Username,
			&i.Email,
			&i.Name,
			&i.Middlename,
			&i.Surname,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePreference = `-- name: RemovePreference :exec
DELETE FROM user_preferences WHERE username = $1 AND preference = $2
`

type RemovePreferenceParams struct {
	Username   string `json:"username"`
	Preference string `json:"preference"`
}

func (q *Queries) RemovePreference(ctx context.Context, arg RemovePreferenceParams) error {
	_, err := q.db.ExecContext(ctx, removePreference, arg.Username, arg.Preference)
	return err
}

const setPreference = `-- name: SetPreference :one
INSERT INTO user_preferences(username,preference) VALUES ($1,$2) RETURNING username, preference
`

type SetPreferenceParams struct {
	Username   string `json:"username"`
	Preference string `json:"preference"`
}

func (q *Queries) SetPreference(ctx context.Context, arg SetPreferenceParams) (UserPreference, error) {
	row := q.db.QueryRowContext(ctx, setPreference, arg.Username, arg.Preference)
	var i UserPreference
	err := row.Scan(&i.Username, &i.Preference)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET email = $2, name = $3, middlename = $4, surname = $5, password = $6 WHERE username = $1
`

type UpdateUserParams struct {
	Username   string         `json:"username"`
	Email      string         `json:"email"`
	Name       string         `json:"name"`
	Middlename sql.NullString `json:"middlename"`
	Surname    string         `json:"surname"`
	Password   string         `json:"password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.Name,
		arg.Middlename,
		arg.Surname,
		arg.Password,
	)
	return err
}
