// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const actualizarDNI = `-- name: ActualizarDNI :exec
UPDATE usuarios SET dni = $2 WHERE id = $1
`

type ActualizarDNIParams struct {
	ID  int32  `json:"id"`
	Dni string `json:"dni"`
}

func (q *Queries) ActualizarDNI(ctx context.Context, arg ActualizarDNIParams) error {
	_, err := q.db.ExecContext(ctx, actualizarDNI, arg.ID, arg.Dni)
	return err
}

const actualizarUsuario = `-- name: ActualizarUsuario :exec
UPDATE usuarios SET nombre = $2, email = $3 WHERE id = $1
`

type ActualizarUsuarioParams struct {
	ID     int32  `json:"id"`
	Nombre string `json:"nombre"`
	Email  string `json:"email"`
}

func (q *Queries) ActualizarUsuario(ctx context.Context, arg ActualizarUsuarioParams) error {
	_, err := q.db.ExecContext(ctx, actualizarUsuario, arg.ID, arg.Nombre, arg.Email)
	return err
}

const agregarComentario = `-- name: AgregarComentario :one
INSERT INTO comentarios_noticia (id_noticia, id_usuario, comentario) VALUES ($1, $2, $3) RETURNING id_noticia, id_usuario, id_comentario, comentario, publicado_en
`

type AgregarComentarioParams struct {
	IDNoticia  int32  `json:"id_noticia"`
	IDUsuario  int32  `json:"id_usuario"`
	Comentario string `json:"comentario"`
}

func (q *Queries) AgregarComentario(ctx context.Context, arg AgregarComentarioParams) (ComentariosNoticium, error) {
	row := q.db.QueryRowContext(ctx, agregarComentario, arg.IDNoticia, arg.IDUsuario, arg.Comentario)
	var i ComentariosNoticium
	err := row.Scan(
		&i.IDNoticia,
		&i.IDUsuario,
		&i.IDComentario,
		&i.Comentario,
		&i.PublicadoEn,
	)
	return i, err
}

const crearNoticia = `-- name: CrearNoticia :one
INSERT INTO noticias (titulo, contenido, publicada_en, tiempo_lectura_estimado) VALUES ($1, $2, $3, $4) RETURNING id, titulo, contenido, publicada_en, tiempo_lectura_estimado, visualizaciones
`

type CrearNoticiaParams struct {
	Titulo                string       `json:"titulo"`
	Contenido             string       `json:"contenido"`
	PublicadaEn           sql.NullTime `json:"publicada_en"`
	TiempoLecturaEstimado sql.NullTime `json:"tiempo_lectura_estimado"`
}

func (q *Queries) CrearNoticia(ctx context.Context, arg CrearNoticiaParams) (Noticia, error) {
	row := q.db.QueryRowContext(ctx, crearNoticia,
		arg.Titulo,
		arg.Contenido,
		arg.PublicadaEn,
		arg.TiempoLecturaEstimado,
	)
	var i Noticia
	err := row.Scan(
		&i.ID,
		&i.Titulo,
		&i.Contenido,
		&i.PublicadaEn,
		&i.TiempoLecturaEstimado,
		&i.Visualizaciones,
	)
	return i, err
}

const crearPerfil = `-- name: CrearPerfil :one
INSERT INTO perfiles (id_usuario, image) VALUES ($1, $2) RETURNING id_usuario, image
`

type CrearPerfilParams struct {
	IDUsuario int32          `json:"id_usuario"`
	Image     sql.NullString `json:"image"`
}

func (q *Queries) CrearPerfil(ctx context.Context, arg CrearPerfilParams) (Perfile, error) {
	row := q.db.QueryRowContext(ctx, crearPerfil, arg.IDUsuario, arg.Image)
	var i Perfile
	err := row.Scan(&i.IDUsuario, &i.Image)
	return i, err
}

const crearUsuario = `-- name: CrearUsuario :one
INSERT INTO usuarios (dni, nombre, email, contraseña) VALUES ($1, $2, $3, $4) RETURNING id, dni, nombre, email, "contraseña", creado_en
`

type CrearUsuarioParams struct {
	Dni        string `json:"dni"`
	Nombre     string `json:"nombre"`
	Email      string `json:"email"`
	Contraseña string `json:"contraseña"`
}

func (q *Queries) CrearUsuario(ctx context.Context, arg CrearUsuarioParams) (Usuario, error) {
	row := q.db.QueryRowContext(ctx, crearUsuario,
		arg.Dni,
		arg.Nombre,
		arg.Email,
		arg.Contraseña,
	)
	var i Usuario
	err := row.Scan(
		&i.ID,
		&i.Dni,
		&i.Nombre,
		&i.Email,
		&i.Contraseña,
		&i.CreadoEn,
	)
	return i, err
}

const deslikearComentario = `-- name: DeslikearComentario :exec
DELETE FROM likes_comentario WHERE id_noticia = $1 AND id_usuario = $2 AND id_comentario = $3 AND id_usuario_like = $4
`

type DeslikearComentarioParams struct {
	IDNoticia     int32 `json:"id_noticia"`
	IDUsuario     int32 `json:"id_usuario"`
	IDComentario  int32 `json:"id_comentario"`
	IDUsuarioLike int32 `json:"id_usuario_like"`
}

func (q *Queries) DeslikearComentario(ctx context.Context, arg DeslikearComentarioParams) error {
	_, err := q.db.ExecContext(ctx, deslikearComentario,
		arg.IDNoticia,
		arg.IDUsuario,
		arg.IDComentario,
		arg.IDUsuarioLike,
	)
	return err
}

const deslikearNoticia = `-- name: DeslikearNoticia :exec
DELETE FROM likes_noticia WHERE id_noticia = $1 AND id_usuario = $2
`

type DeslikearNoticiaParams struct {
	IDNoticia int32 `json:"id_noticia"`
	IDUsuario int32 `json:"id_usuario"`
}

func (q *Queries) DeslikearNoticia(ctx context.Context, arg DeslikearNoticiaParams) error {
	_, err := q.db.ExecContext(ctx, deslikearNoticia, arg.IDNoticia, arg.IDUsuario)
	return err
}

const eliminarComentario = `-- name: EliminarComentario :exec
DELETE FROM comentarios_noticia WHERE id_noticia = $1 AND id_usuario = $2 AND id_comentario = $3
`

type EliminarComentarioParams struct {
	IDNoticia    int32 `json:"id_noticia"`
	IDUsuario    int32 `json:"id_usuario"`
	IDComentario int32 `json:"id_comentario"`
}

func (q *Queries) EliminarComentario(ctx context.Context, arg EliminarComentarioParams) error {
	_, err := q.db.ExecContext(ctx, eliminarComentario, arg.IDNoticia, arg.IDUsuario, arg.IDComentario)
	return err
}

const eliminarUsuario = `-- name: EliminarUsuario :exec
DELETE FROM usuarios WHERE id = $1
`

func (q *Queries) EliminarUsuario(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, eliminarUsuario, id)
	return err
}

const likearComentario = `-- name: LikearComentario :one
INSERT INTO likes_comentario (id_noticia, id_usuario, id_comentario, id_usuario_like) VALUES ($1, $2, $3, $4) RETURNING id_noticia, id_usuario, id_comentario, id_usuario_like, liked_at
`

type LikearComentarioParams struct {
	IDNoticia     int32 `json:"id_noticia"`
	IDUsuario     int32 `json:"id_usuario"`
	IDComentario  int32 `json:"id_comentario"`
	IDUsuarioLike int32 `json:"id_usuario_like"`
}

func (q *Queries) LikearComentario(ctx context.Context, arg LikearComentarioParams) (LikesComentario, error) {
	row := q.db.QueryRowContext(ctx, likearComentario,
		arg.IDNoticia,
		arg.IDUsuario,
		arg.IDComentario,
		arg.IDUsuarioLike,
	)
	var i LikesComentario
	err := row.Scan(
		&i.IDNoticia,
		&i.IDUsuario,
		&i.IDComentario,
		&i.IDUsuarioLike,
		&i.LikedAt,
	)
	return i, err
}

const likearNoticia = `-- name: LikearNoticia :one
INSERT INTO likes_noticia (id_noticia, id_usuario) VALUES ($1, $2) RETURNING id_noticia, id_usuario, likeado_en
`

type LikearNoticiaParams struct {
	IDNoticia int32 `json:"id_noticia"`
	IDUsuario int32 `json:"id_usuario"`
}

func (q *Queries) LikearNoticia(ctx context.Context, arg LikearNoticiaParams) (LikesNoticium, error) {
	row := q.db.QueryRowContext(ctx, likearNoticia, arg.IDNoticia, arg.IDUsuario)
	var i LikesNoticium
	err := row.Scan(&i.IDNoticia, &i.IDUsuario, &i.LikeadoEn)
	return i, err
}

const listarComentarios = `-- name: ListarComentarios :many
SELECT id_noticia, id_usuario, id_comentario, comentario, publicado_en FROM comentarios_noticia ORDER BY publicado_en LIMIT 10 OFFSET $1
`

func (q *Queries) ListarComentarios(ctx context.Context, offset int32) ([]ComentariosNoticium, error) {
	rows, err := q.db.QueryContext(ctx, listarComentarios, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ComentariosNoticium
	for rows.Next() {
		var i ComentariosNoticium
		if err := rows.Scan(
			&i.IDNoticia,
			&i.IDUsuario,
			&i.IDComentario,
			&i.Comentario,
			&i.PublicadoEn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listarNoticias = `-- name: ListarNoticias :many
SELECT id, titulo, contenido, publicada_en, tiempo_lectura_estimado, visualizaciones FROM noticias ORDER BY publicada_en LIMIT 5 OFFSET $1
`

func (q *Queries) ListarNoticias(ctx context.Context, offset int32) ([]Noticia, error) {
	rows, err := q.db.QueryContext(ctx, listarNoticias, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Noticia
	for rows.Next() {
		var i Noticia
		if err := rows.Scan(
			&i.ID,
			&i.Titulo,
			&i.Contenido,
			&i.PublicadaEn,
			&i.TiempoLecturaEstimado,
			&i.Visualizaciones,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listarUsuarios = `-- name: ListarUsuarios :many
SELECT id, dni, nombre, email, "contraseña", creado_en FROM usuarios ORDER BY id
`

func (q *Queries) ListarUsuarios(ctx context.Context) ([]Usuario, error) {
	rows, err := q.db.QueryContext(ctx, listarUsuarios)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Usuario
	for rows.Next() {
		var i Usuario
		if err := rows.Scan(
			&i.ID,
			&i.Dni,
			&i.Nombre,
			&i.Email,
			&i.Contraseña,
			&i.CreadoEn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const obtenerComentariosNoticia = `-- name: ObtenerComentariosNoticia :one
SELECT COUNT(*) FROM comentarios_noticia WHERE id_noticia = $1
`

func (q *Queries) ObtenerComentariosNoticia(ctx context.Context, idNoticia int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, obtenerComentariosNoticia, idNoticia)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const obtenerLikesComentario = `-- name: ObtenerLikesComentario :one
SELECT COUNT(*) FROM likes_comentario WHERE id_noticia = $1 AND id_comentario = $2
`

type ObtenerLikesComentarioParams struct {
	IDNoticia    int32 `json:"id_noticia"`
	IDComentario int32 `json:"id_comentario"`
}

func (q *Queries) ObtenerLikesComentario(ctx context.Context, arg ObtenerLikesComentarioParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, obtenerLikesComentario, arg.IDNoticia, arg.IDComentario)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const obtenerLikesNoticia = `-- name: ObtenerLikesNoticia :one
SELECT COUNT(*) FROM likes_noticia WHERE id_noticia = $1
`

func (q *Queries) ObtenerLikesNoticia(ctx context.Context, idNoticia int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, obtenerLikesNoticia, idNoticia)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const obtenerUsuarioPorDNI = `-- name: ObtenerUsuarioPorDNI :one
SELECT id, dni, nombre, email, "contraseña", creado_en FROM usuarios WHERE dni = $1
`

func (q *Queries) ObtenerUsuarioPorDNI(ctx context.Context, dni string) (Usuario, error) {
	row := q.db.QueryRowContext(ctx, obtenerUsuarioPorDNI, dni)
	var i Usuario
	err := row.Scan(
		&i.ID,
		&i.Dni,
		&i.Nombre,
		&i.Email,
		&i.Contraseña,
		&i.CreadoEn,
	)
	return i, err
}

const obtenerUsuarioPorID = `-- name: ObtenerUsuarioPorID :one
SELECT id, dni, nombre, email, "contraseña", creado_en FROM usuarios WHERE id = $1
`

func (q *Queries) ObtenerUsuarioPorID(ctx context.Context, id int32) (Usuario, error) {
	row := q.db.QueryRowContext(ctx, obtenerUsuarioPorID, id)
	var i Usuario
	err := row.Scan(
		&i.ID,
		&i.Dni,
		&i.Nombre,
		&i.Email,
		&i.Contraseña,
		&i.CreadoEn,
	)
	return i, err
}
